{
  "Id": "34b4fa10-329f-4c50-ab7c-d6b047264b83",
  "Name": "SQL - Backup Database",
  "Description": "Backup a MS SQL Server database to the file system. Optionally specify a retention policy.",
  "ActionType": "Octopus.Script",
  "Version": 10,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# $ServerName = $OctopusParameters['Server']\n# $DatabaseName = $OctopusParameters['Database']\n# $BackupDirectory = $OctopusParameters['BackupDirectory']\n# $CompressionOption = [int]$OctopusParameters['Compression']\n# $Devices = [int]$OctopusParameters['Devices']\n# $Stamp = $OctopusParameters['Stamp']\n# $UseSqlServerTimeStamp = $OctopusParameters['UseSqlServerTimeStamp']\n# $SqlLogin = $OctopusParameters['SqlLogin']\n# $SqlPassword = $OctopusParameters['SqlPassword']\n# $ConnectionTimeout = $OctopusParameters['ConnectionTimeout']\n# $Incremental = [boolean]::Parse($OctopusParameters['Incremental'])\n# $CopyOnly = [boolean]::Parse($OctopusParameters['CopyOnly'])\n# $RetentionPolicyEnabled = [boolean]::Parse($OctopusParameters['RetentionPolicyEnabled'])\n# $RetentionPolicyCount = [int]$OctopusParameters['RetentionPolicyCount']\n\n# $ErrorActionPreference = \"Stop\"\n\n# function ConnectToDatabase() {\n#     param($server, $SqlLogin, $SqlPassword)\n\n#     $server.ConnectionContext.StatementTimeout = $ConnectionTimeout\n\n#     if ($SqlLogin -ne $null) {\n\n#         if ($SqlPassword -eq $null) {\n#             throw \"SQL Password must be specified when using SQL authentication.\"\n#         }\n\n#         $server.ConnectionContext.LoginSecure = $false\n#         $server.ConnectionContext.Login = $SqlLogin\n#         $server.ConnectionContext.Password = $SqlPassword\n\n#         Write-Host \"Connecting to server using SQL authentication as $SqlLogin.\"\n#         $server = New-Object Microsoft.SqlServer.Management.Smo.Server $server.ConnectionContext\n#     }\n#     else {\n#         Write-Host \"Connecting to server using Windows authentication.\"\n#     }\n\n#     try {\n#         $server.ConnectionContext.Connect()\n#     } catch {\n#         Write-Error \"An error occurred connecting to the database server!`r`n$($_.Exception.ToString())\"\n#     }\n# }\n\n# function AddPercentHandler {\n#     param($smoBackupRestore, $action)\n\n#     $percentEventHandler = [Microsoft.SqlServer.Management.Smo.PercentCompleteEventHandler] { Write-Host $dbName $action $_.Percent \"%\" }\n#     $completedEventHandler = [Microsoft.SqlServer.Management.Common.ServerMessageEventHandler] { Write-Host $_.Error.Message}\n\n#     $smoBackupRestore.add_PercentComplete($percentEventHandler)\n#     $smoBackupRestore.add_Complete($completedEventHandler)\n#     $smoBackupRestore.PercentCompleteNotification=10\n# }\n\n# function CreatDevice {\n#     param($smoBackupRestore, $directory, $name)\n\n#     $devicePath = [System.IO.Path]::Combine($directory, $name)\n#     $smoBackupRestore.Devices.AddDevice($devicePath, \"File\")\n#     return $devicePath\n# }\n\n# function CreateDevices {\n#     param($smoBackupRestore, $devices, $directory, $dbName, $incremental)\n\n#     $targetPaths = New-Object System.Collections.Generic.List[System.String]\n\n# \t$extension = \".bak\"\n\n# \tif ($Incremental -eq $true){\n# \t\t$extension = \".trn\"\n# \t}\n\n#     if ($devices -eq 1){\n#         $deviceName = $dbName + \"_\" + $timestamp + $extension\n#         $targetPath = CreatDevice $smoBackupRestore $directory $deviceName\n#         $targetPaths.Add($targetPath)\n#     } else {\n#         for ($i=1; $i -le $devices; $i++){\n#             $deviceName = $dbName + \"_\" + $timestamp + \"_\" + $i + $extension\n#             $targetPath = CreatDevice $smoBackupRestore $directory $deviceName\n#             $targetPaths.Add($targetPath)\n#         }\n#     }\n#     return $targetPaths\n# }\n\n# function BackupDatabase {\n#     param($dbName, $devices, $compressionOption, $incremental, $copyonly, $RetentionPolicyEnabled, $RetentionPolicyCount)\n\n#     $smoBackup = New-Object Microsoft.SqlServer.Management.Smo.Backup\n#     $targetPaths = CreateDevices $smoBackup $devices $BackupDirectory $dbName $incremental\n\n#     Write-Host \"Attempting to backup database $ServerName.$dbName to:\"\n#     $targetPaths\n#     Write-Host \"\"\n\n#     if ($incremental -eq $true){\n#       $smoBackup.Action = \"Log\";\n#       $smoBackup.BackupSetDescription = \"Log backup of \" + $dbName\n#       $smoBackup.LogTruncation = \"Truncate\"\n#     } else {\n#       $smoBackup.Action = \"Database\"\n#       $smoBackup.BackupSetDescription = \"Full Backup of \" + $dbName\n#     }\n\n#     $smoBackup.BackupSetName = $dbName + \" Backup\"\n#     $smoBackup.MediaDescription = \"Disk\"\n#     $smoBackup.CompressionOption = $compressionOption\n#     $smoBackup.CopyOnly = $copyonly\n#     $smoBackup.Initialize = $true\n#     $smoBackup.Database = $dbName;\n\n#     try {\n#         AddPercentHandler $smoBackup \"backed up\"\n#         $smoBackup.SqlBackup($server)\n#     } catch {\n#         Write-Error \"An error occurred backing up the database!`r`n$($_.Exception.ToString())\"\n#     }\n\n#     Write-Host \"Backup completed successfully.\"\n\n#     if ($RetentionPolicyEnabled -eq $true -and $RetentionPolicyCount -gt 0) {\n#       Write-Host \"Cleaning up backups, retaining last $RetentionPolicyCount for DB $dbName\"\n#       $retained = Get-ChildItem $BackupDirectory -Filter \"$dbName*\" | Sort-Object | Select-Object -Last $RetentionPolicyCount\n#       Get-ChildItem $BackupDirectory -Exclude $retained | Remove-Item\n#     }\n# }\n\n# [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | Out-Null\n# [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoExtended\") | Out-Null\n# [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.ConnectionInfo\") | Out-Null\n# [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoEnum\") | Out-Null\n\n# $server = New-Object Microsoft.SqlServer.Management.Smo.Server $ServerName\n\n# ConnectToDatabase $server $SqlLogin $SqlPassword\n\n# $database = $server.Databases | Where-Object { $_.Name -eq $DatabaseName }\n# $timestampFormat = \"yyyy-MM-dd-HHmmss\"\n# if ($UseSqlServerTimeStamp -eq $true)\n# {\n#     $timestampFormat = \"yyyyMMdd_HHmmss\"\n# }\n# $timestamp = if(-not [string]::IsNullOrEmpty($Stamp)) { $Stamp } else { Get-Date -format $timestampFormat }\n\n# if ($database -eq $null) {\n#     Write-Error \"Database $DatabaseName does not exist on $ServerName\"\n# }\n\n# if ($Incremental -eq $true) {\n# \tif ($database.RecoveryModel -eq 3) {\n# \t\twrite-error \"$DatabaseName has Recovery Model set to Simple. Log backup cannot be run.\"\n# \t}\n\n# \tif ($database.LastBackupDate -eq \"1/1/0001 12:00 AM\") {\n# \t\twrite-error \"$DatabaseName has no Full backups. Log backup cannot be run.\"\n# \t}\n# }\n\n# if ($RetentionPolicyEnabled -eq $true -and $RetentionPolicyCount -gt 0) {\n#   if (-not [int]::TryParse($RetentionPolicyCount, [ref]$null) -or $RetentionPolicyCount -le 0) {\n#     Write-Error \"RetentionPolicyCount must be an integer greater than zero.\"\n#   }\n# }\n\n# BackupDatabase $DatabaseName $Devices $CompressionOption $Incremental $CopyOnly $RetentionPolicyEnabled $RetentionPolicyCount\n\n# Ensure necessary SMO assemblies are loaded\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoExtended\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.ConnectionInfo\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoEnum\") | Out-Null\n\n$ErrorActionPreference = \"Stop\"\n\n# Function to connect to the database server\nfunction ConnectToDatabase {\n    param(\n        [Microsoft.SqlServer.Management.Smo.Server]$server,\n        [string]$SqlLogin,\n        [string]$SqlPassword,\n        [int]$ConnectionTimeout\n    )\n\n    $server.ConnectionContext.StatementTimeout = $ConnectionTimeout\n\n    if ($SqlLogin) {\n        if (-not $SqlPassword) {\n            throw \"SQL Password must be specified when using SQL authentication.\"\n        }\n\n        $server.ConnectionContext.LoginSecure = $false\n        $server.ConnectionContext.Login = $SqlLogin\n        $server.ConnectionContext.Password = $SqlPassword\n\n        Write-Host \"Connecting to server using SQL authentication as $SqlLogin.\"\n    } else {\n        Write-Host \"Connecting to server using Windows authentication.\"\n    }\n\n    try {\n        $server.ConnectionContext.Connect()\n    } catch {\n        Write-Error \"An error occurred connecting to the database server!`r`n$($_.Exception.ToString())\"\n    }\n}\n\n# Function to add event handlers for progress and completion\nfunction AddPercentHandler {\n    param(\n        $smoBackupRestore,\n        [string]$action,\n        [string]$dbName\n    )\n\n    $percentEventHandler = [Microsoft.SqlServer.Management.Smo.PercentCompleteEventHandler] { Write-Host \"$dbName $action $($_.Percent)%\" }\n    $completedEventHandler = [Microsoft.SqlServer.Management.Common.ServerMessageEventHandler] { Write-Host $_.Error.Message }\n\n    $smoBackupRestore.add_PercentComplete($percentEventHandler)\n    $smoBackupRestore.add_Complete($completedEventHandler)\n    $smoBackupRestore.PercentCompleteNotification = 10\n}\n\n# Function to create backup device\nfunction CreateDevice {\n    param(\n        $smoBackupRestore,\n        [string]$directory,\n        [string]$name\n    )\n\n    $devicePath = [System.IO.Path]::Combine($directory, $name)\n    $smoBackupRestore.Devices.AddDevice($devicePath, \"File\")\n    return $devicePath\n}\n\n# Function to create one or multiple backup devices\nfunction CreateDevices {\n    param(\n        $smoBackupRestore,\n        [int]$devices,\n        [string]$directory,\n        [string]$dbName,\n        [boolean]$incremental,\n        [string]$timestamp\n    )\n\n    $targetPaths = New-Object System.Collections.Generic.List[System.String]\n\n    $extension = \".bak\"\n    if ($Incremental -eq $true){\n      $extension = \".trn\"\n    }\n\n    if ($devices -eq 1) {\n        $deviceName = \"$dbName`_$timestamp$extension\"\n        $targetPath = CreateDevice $smoBackupRestore $directory $deviceName\n        $targetPaths.Add($targetPath)\n    } else {\n        for ($i = 1; $i -le $devices; $i++) {\n            $deviceName = \"$dbName`_$timestamp`_$i$extension\"\n            $targetPath = CreateDevice $smoBackupRestore $directory $deviceName\n            $targetPaths.Add($targetPath)\n        }\n    }\n    return $targetPaths\n}\n\n# Function to perform the database backup\nfunction BackupDatabase {\n    param(\n        [string]$ServerName,\n        [string]$DatabaseName,\n        [string]$BackupDirectory,\n        [int]$Devices,\n        [int]$CompressionOption,\n        [boolean]$Incremental,\n        [boolean]$CopyOnly,\n        [boolean]$RetentionPolicyEnabled,\n        [int]$RetentionPolicyCount,\n        [Microsoft.SqlServer.Management.Smo.Server]$server,\n        [string]$timestamp\n    )\n\n    $smoBackup = New-Object Microsoft.SqlServer.Management.Smo.Backup\n    $targetPaths = CreateDevices $smoBackup $Devices $BackupDirectory $DatabaseName $Incremental $timestamp\n    Write-Host \"Attempting to backup database $ServerName.$DatabaseName to:\"\n    $targetPaths.ForEach({ Write-Host $_ })\n    Write-Host \"\"\n\n    if ($incremental -eq $true){\n      $smoBackup.Action = \"Log\";\n      $smoBackup.BackupSetDescription = \"Log backup of \" + $dbName\n      $smoBackup.LogTruncation = \"Truncate\"\n    } else {\n      $smoBackup.Action = \"Database\"\n      $smoBackup.BackupSetDescription = \"Full Backup of \" + $dbName\n    }\n\n    $smoBackup.BackupSetName = \"$DatabaseName Backup\"\n    $smoBackup.MediaDescription = \"Disk\"\n    $smoBackup.CompressionOption = $CompressionOption\n    $smoBackup.CopyOnly = $CopyOnly\n    $smoBackup.Initialize = $true\n    $smoBackup.Database = $DatabaseName\n\n    try {\n        AddPercentHandler $smoBackup \"backed up\" $DatabaseName\n        $smoBackup.SqlBackup($server)\n        Write-Host \"Backup completed successfully.\"\n    } catch {\n        Write-Error \"An error occurred backing up the database!`r`n$($_.Exception.ToString())\"\n    }\n\n    if ($RetentionPolicyEnabled -and $RetentionPolicyCount -gt 0) {\n        Write-Host \"Cleaning up backups, retaining last $RetentionPolicyCount for DB $DatabaseName\"\n        $retainedBackups = Get-ChildItem $BackupDirectory -Filter \"$DatabaseName*\" | Sort-Object CreationTime -Descending | Select-Object -First $RetentionPolicyCount\n        $allBackups = Get-ChildItem $BackupDirectory -Filter \"$DatabaseName*\"\n        $backupsToRemove = $allBackups | Where-Object { $retainedBackups -notcontains $_ }\n        $backupsToRemove | ForEach-Object { Remove-Item $_.FullName }\n    }\n}\n\n# Execution block to ensure this script runs only when not being sourced for testing\n# This check ensures that the script only attempts to read from $OctopusParameters and execute the backup when not being sourced for testing.\nif ($MyInvocation.InvocationName -ne '.') {\n  # Extract parameters from $OctopusParameters\n  $ServerName = $OctopusParameters['Server']\n  $DatabaseName = $OctopusParameters['Database']\n  $BackupDirectory = $OctopusParameters['BackupDirectory']\n  $CompressionOption = [int]$OctopusParameters['Compression']\n  $Devices = [int]$OctopusParameters['Devices']\n  $Incremental = [boolean]::Parse($OctopusParameters['Incremental'])\n  $CopyOnly = [boolean]::Parse($OctopusParameters['CopyOnly'])\n  $RetentionPolicyEnabled = [boolean]::Parse($OctopusParameters['RetentionPolicyEnabled'])\n  $RetentionPolicyCount = [int]$OctopusParameters['RetentionPolicyCount']\n  $SqlLogin = $OctopusParameters['SqlLogin']\n  $SqlPassword = $OctopusParameters['SqlPassword']\n  $ConnectionTimeout = $OctopusParameters['ConnectionTimeout']\n\n  $timestamp = Get-Date -Format \"yyyyMMdd_HHmmss\" # Or use $OctopusParameters['Stamp'] if provided and not empty\n\n  $server = New-Object Microsoft.SqlServer.Management.Smo.Server $ServerName\n  ConnectToDatabase -server $server -SqlLogin $SqlLogin -SqlPassword $SqlPassword -ConnectionTimeout $ConnectionTimeout\n\n  BackupDatabase -ServerName $ServerName -DatabaseName $DatabaseName -BackupDirectory $BackupDirectory -Devices $Devices -CompressionOption $CompressionOption -Incremental $Incremental -CopyOnly $CopyOnly -RetentionPolicyEnabled $RetentionPolicyEnabled -RetentionPolicyCount $RetentionPolicyCount -server $server -timestamp $timestamp\n}\n\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "Server",
      "Label": "Server",
      "HelpText": "The name of the SQL Server instance that the database resides in.",
      "DefaultValue": ".",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Database",
      "Label": "Database",
      "HelpText": "The name of the database to back up.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "BackupDirectory",
      "Label": "Backup Directory",
      "HelpText": "The output directory to drop the database backup into.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlLogin",
      "Label": "SQL login",
      "HelpText": "The SQL auth login to connect with. If specified, the SQL Password must also be entered.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlPassword",
      "Label": "SQL password",
      "HelpText": "The password for the SQL auth login to connect with. Only used if SQL Login is specified.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "Compression",
      "Label": "Compression Option",
      "HelpText": "- 0  -   Use the default backup compression server configuration\n- 1  -   Enable the backup compression\n- 2  -   Disable the backup compression",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Default\n1|Enabled\n2|Disabled"
      }
    },
    {
      "Name": "Devices",
      "Label": "Devices",
      "HelpText": "The number of backup devices to use for the backup.",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "1|1\n2|2\n3|3\n4|4"
      }
    },
    {
      "Name": "Stamp",
      "Label": "Backup file suffix",
      "HelpText": "Specify a suffix to add to the backup file names. If left blank the backup will use the current timestamp.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "UseSqlServerTimeStamp",
      "Label": "Use SQL Server timestamp format",
      "HelpText": "If no suffix is specified, use the MSSQL timestamp format.",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "ConnectionTimeout",
      "Label": "Connection Timeout",
      "HelpText": "Specify the connection timeout settings (in seconds) for the SQL connection. If the backup takes longer than this value, the backup will fail.",
      "DefaultValue": "36000",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Incremental",
      "Label": "Backup Action",
      "HelpText": "Specify the Database backup action",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "false|Full\ntrue|Log (Incremental)"
      }
    },
    {
      "Name": "CopyOnly",
      "Label": "Copy Only",
      "HelpText": "Specify whether the backup is Copy Only",
      "DefaultValue": "true",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "RetentionPolicyEnabled",
      "Label": "Retention Policy Enabled",
      "HelpText": "Specify if a limit should be imposed on retaining older backups",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "RetentionPolicyCount",
      "Label": "Retention Policy Count",
      "HelpText": "Specify how many old copies of the DB should be retained (only if Retention Policy Enabled is true)",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2023-08-16T09:50:00.0000000-07:00",
  "LastModifiedBy": "bcullman",
  "$Meta": {
    "ExportedAt": "2015-08-20T23:05:08.0800000-07:00",
    "OctopusVersion": "2.6.0.778",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}