{
  "Id": "34b4fa10-329f-4c50-ab7c-d6b047264b83",
  "Name": "SQL - Backup Database",
  "Description": "Backup a MS SQL Server database to the file system. Optionally specify a retention policy.",
  "ActionType": "Octopus.Script",
  "Version": 10,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$ServerName = $OctopusParameters['Server']\n$DatabaseName = $OctopusParameters['Database']\n$BackupDirectory = $OctopusParameters['BackupDirectory']\n$CompressionOption = [int]$OctopusParameters['Compression']\n$Devices = [int]$OctopusParameters['Devices']\n$Stamp = $OctopusParameters['Stamp']\n$UseSqlServerTimeStamp = $OctopusParameters['UseSqlServerTimeStamp']\n$SqlLogin = $OctopusParameters['SqlLogin']\n$SqlPassword = $OctopusParameters['SqlPassword']\n$ConnectionTimeout = $OctopusParameters['ConnectionTimeout']\n$Incremental = [boolean]::Parse($OctopusParameters['Incremental'])\n$CopyOnly = [boolean]::Parse($OctopusParameters['CopyOnly'])\n$RetentionPolicyEnabled = [boolean]::Parse($OctopusParameters['RetentionPolicyEnabled'])\n$RetentionPolicyCount = [int]$OctopusParameters['RetentionPolicyCount']\n\n$ErrorActionPreference = \"Stop\"\n\nfunction ConnectToDatabase() {\n    param($server, $SqlLogin, $SqlPassword)\n\n    $server.ConnectionContext.StatementTimeout = $ConnectionTimeout\n\n    if ($SqlLogin -ne $null) {\n\n        if ($SqlPassword -eq $null) {\n            throw \"SQL Password must be specified when using SQL authentication.\"\n        }\n\n        $server.ConnectionContext.LoginSecure = $false\n        $server.ConnectionContext.Login = $SqlLogin\n        $server.ConnectionContext.Password = $SqlPassword\n\n        Write-Host \"Connecting to server using SQL authentication as $SqlLogin.\"\n        $server = New-Object Microsoft.SqlServer.Management.Smo.Server $server.ConnectionContext\n    }\n    else {\n        Write-Host \"Connecting to server using Windows authentication.\"\n    }\n\n    try {\n        $server.ConnectionContext.Connect()\n    } catch {\n        Write-Error \"An error occurred connecting to the database server!`r`n$($_.Exception.ToString())\"\n    }\n}\n\nfunction AddPercentHandler {\n    param($smoBackupRestore, $action)\n\n    $percentEventHandler = [Microsoft.SqlServer.Management.Smo.PercentCompleteEventHandler] { Write-Host $dbName $action $_.Percent \"%\" }\n    $completedEventHandler = [Microsoft.SqlServer.Management.Common.ServerMessageEventHandler] { Write-Host $_.Error.Message}\n\n    $smoBackupRestore.add_PercentComplete($percentEventHandler)\n    $smoBackupRestore.add_Complete($completedEventHandler)\n    $smoBackupRestore.PercentCompleteNotification=10\n}\n\nfunction CreatDevice {\n    param($smoBackupRestore, $directory, $name)\n\n    $devicePath = [System.IO.Path]::Combine($directory, $name)\n    $smoBackupRestore.Devices.AddDevice($devicePath, \"File\")\n    return $devicePath\n}\n\nfunction CreateDevices {\n    param($smoBackupRestore, $devices, $directory, $dbName, $incremental)\n\n    $targetPaths = New-Object System.Collections.Generic.List[System.String]\n\n\t$extension = \".bak\"\n\n\tif ($Incremental -eq $true){\n\t\t$extension = \".trn\"\n\t}\n\n    if ($devices -eq 1){\n        $deviceName = $dbName + \"_\" + $timestamp + $extension\n        $targetPath = CreatDevice $smoBackupRestore $directory $deviceName\n        $targetPaths.Add($targetPath)\n    } else {\n        for ($i=1; $i -le $devices; $i++){\n            $deviceName = $dbName + \"_\" + $timestamp + \"_\" + $i + $extension\n            $targetPath = CreatDevice $smoBackupRestore $directory $deviceName\n            $targetPaths.Add($targetPath)\n        }\n    }\n    return $targetPaths\n}\n\nfunction BackupDatabase {\n    param($dbName, $devices, $compressionOption, $incremental, $copyonly, $RetentionPolicyEnabled, $RetentionPolicyCount)\n\n    $smoBackup = New-Object Microsoft.SqlServer.Management.Smo.Backup\n    $targetPaths = CreateDevices $smoBackup $devices $BackupDirectory $dbName $incremental\n\n    Write-Host \"Attempting to backup database $ServerName.$dbName to:\"\n    $targetPaths\n    Write-Host \"\"\n\n    if ($incremental -eq $true){\n      $smoBackup.Action = \"Log\";\n      $smoBackup.BackupSetDescription = \"Log backup of \" + $dbName\n      $smoBackup.LogTruncation = \"Truncate\"\n    } else {\n      $smoBackup.Action = \"Database\"\n      $smoBackup.BackupSetDescription = \"Full Backup of \" + $dbName\n    }\n\n    $smoBackup.BackupSetName = $dbName + \" Backup\"\n    $smoBackup.MediaDescription = \"Disk\"\n    $smoBackup.CompressionOption = $compressionOption\n    $smoBackup.CopyOnly = $copyonly\n    $smoBackup.Initialize = $true\n    $smoBackup.Database = $dbName;\n\n    try {\n        AddPercentHandler $smoBackup \"backed up\"\n        $smoBackup.SqlBackup($server)\n    } catch {\n        Write-Error \"An error occurred backing up the database!`r`n$($_.Exception.ToString())\"\n    }\n\n    Write-Host \"Backup completed successfully.\"\n\n    if ($RetentionPolicyEnabled -eq $true -and $RetentionPolicyCount -gt 0) {\n      Write-Host \"Cleaning up backups, retaining last $RetentionPolicyCount for DB $dbName\"\n      $retained = Get-ChildItem $BackupDirectory -Filter \"$dbName*\" | Sort-Object | Select-Object -Last $RetentionPolicyCount\n      Get-ChildItem $BackupDirectory -Exclude $retained | Remove-Item\n    }\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoExtended\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.ConnectionInfo\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoEnum\") | Out-Null\n\n$server = New-Object Microsoft.SqlServer.Management.Smo.Server $ServerName\n\nConnectToDatabase $server $SqlLogin $SqlPassword\n\n$database = $server.Databases | Where-Object { $_.Name -eq $DatabaseName }\n$timestampFormat = \"yyyy-MM-dd-HHmmss\"\nif ($UseSqlServerTimeStamp -eq $true)\n{\n    $timestampFormat = \"yyyyMMdd_HHmmss\"\n}\n$timestamp = if(-not [string]::IsNullOrEmpty($Stamp)) { $Stamp } else { Get-Date -format $timestampFormat }\n\nif ($database -eq $null) {\n    Write-Error \"Database $DatabaseName does not exist on $ServerName\"\n}\n\nif ($Incremental -eq $true) {\n\tif ($database.RecoveryModel -eq 3) {\n\t\twrite-error \"$DatabaseName has Recovery Model set to Simple. Log backup cannot be run.\"\n\t}\n\n\tif ($database.LastBackupDate -eq \"1/1/0001 12:00 AM\") {\n\t\twrite-error \"$DatabaseName has no Full backups. Log backup cannot be run.\"\n\t}\n}\n\nif ($RetentionPolicyEnabled -eq $true -and $RetentionPolicyCount -gt 0) {\n  if (-not [int]::TryParse($RetentionPolicyCount, [ref]$null) -or $RetentionPolicyCount -le 0) {\n    Write-Error \"RetentionPolicyCount must be an integer greater than zero.\"\n  }\n}\n\nBackupDatabase $DatabaseName $Devices $CompressionOption $Incremental $CopyOnly $RetentionPolicyEnabled $RetentionPolicyCount\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "Server",
      "Label": "Server",
      "HelpText": "The name of the SQL Server instance that the database resides in.",
      "DefaultValue": ".",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Database",
      "Label": "Database",
      "HelpText": "The name of the database to back up.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "BackupDirectory",
      "Label": "Backup Directory",
      "HelpText": "The output directory to drop the database backup into.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlLogin",
      "Label": "SQL login",
      "HelpText": "The SQL auth login to connect with. If specified, the SQL Password must also be entered.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlPassword",
      "Label": "SQL password",
      "HelpText": "The password for the SQL auth login to connect with. Only used if SQL Login is specified.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "Compression",
      "Label": "Compression Option",
      "HelpText": "- 0  -   Use the default backup compression server configuration\n- 1  -   Enable the backup compression\n- 2  -   Disable the backup compression",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Default\n1|Enabled\n2|Disabled"
      }
    },
    {
      "Name": "Devices",
      "Label": "Devices",
      "HelpText": "The number of backup devices to use for the backup.",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "1|1\n2|2\n3|3\n4|4"
      }
    },
    {
      "Name": "Stamp",
      "Label": "Backup file suffix",
      "HelpText": "Specify a suffix to add to the backup file names. If left blank the backup will use the current timestamp.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "UseSqlServerTimeStamp",
      "Label": "Use SQL Server timestamp format",
      "HelpText": "If no suffix is specified, use the MSSQL timestamp format.",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "ConnectionTimeout",
      "Label": "Connection Timeout",
      "HelpText": "Specify the connection timeout settings (in seconds) for the SQL connection. If the backup takes longer than this value, the backup will fail.",
      "DefaultValue": "36000",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Incremental",
      "Label": "Backup Action",
      "HelpText": "Specify the Database backup action",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "false|Full\ntrue|Log (Incremental)"
      }
    },
    {
      "Name": "CopyOnly",
      "Label": "Copy Only",
      "HelpText": "Specify whether the backup is Copy Only",
      "DefaultValue": "true",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "RetentionPolicyEnabled",
      "Label": "Retention Policy Enabled",
      "HelpText": "Specify if a limit should be imposed on retaining older backups",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "RetentionPolicyCount",
      "Label": "Retention Policy Count",
      "HelpText": "Specify how many old copies of the DB should be retained (only if Retention Policy Enabled is true)",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2023-08-16T09:50:00.0000000-07:00",
  "LastModifiedBy": "bcullman",
  "$Meta": {
    "ExportedAt": "2015-08-20T23:05:08.0800000-07:00",
    "OctopusVersion": "2.6.0.778",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}